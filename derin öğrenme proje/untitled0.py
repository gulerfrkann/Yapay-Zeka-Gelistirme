# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ujY1TStaYz-3YHuYrn5lMvjoZ28vsZzN
"""

!pip install tensorflow gradio

import tensorflow as tf
from tensorflow.keras import layers, models

# MNIST veri setini yükle
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()#yazıyı tanımak

# Normalize et
x_train, x_test = x_train / 255.0, x_test / 255.0 # piksel değerleri 0–255

# CNN için 4 boyutlu hale getir
x_train = x_train[..., tf.newaxis]
x_test = x_test[..., tf.newaxis]

# Modeli oluştur
model = models.Sequential([
    layers.Conv2D(32, 3, activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D(),
    layers.Conv2D(64, 3, activation='relu'),
    layers.MaxPooling2D(),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Derle
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Eğit
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Kaydet
model.save("mnist_model.h5")

from tensorflow.keras.models import load_model
model = load_model("mnist_model.h5")  # Model dosyanın adı bu olmalı

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense #yazıyı tanımak
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Veriyi yükle
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(-1, 28, 28, 1).astype("float32") / 255 #normalizasyon ve 4 boyutlu hal
x_test = x_test.reshape(-1, 28, 28, 1).astype("float32") / 255
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Modeli oluştur
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Eğit ve kaydet
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=2)
model.save("model.keras")           # modeli kaydeder
model = tf.keras.models.load_model("model.keras")  # yükler

!pip install gradio

import tensorflow as tf
from tensorflow.keras import layers, models #rakamları tanımak
from tensorflow.keras.datasets import mnist

# Veri setini yükle
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train / 255.0
x_test = x_test / 255.0
x_train = x_train[..., tf.newaxis]
x_test = x_test[..., tf.newaxis]

# Modeli oluştur
model = models.Sequential([
    layers.Conv2D(32, 3, activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D(),
    layers.Conv2D(64, 3, activation='relu'),
    layers.MaxPooling2D(),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Derle ve eğit
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=3, validation_data=(x_test, y_test))

# Kaydet
model.save("model.h5")
print("✅ model.h5 başarıyla oluşturuldu.")

from google.colab import files
files.download("mnist_model.tflite")

import gradio as gr
import numpy as np   #arayüzü oluşturma
import cv2
from tensorflow.keras.models import load_model

# Modeli yükle
try:
    model = load_model("model.h5")
except OSError:
    raise FileNotFoundError("HATA: 'model.h5' dosyası bulunamadı. Lütfen modeli eğitip bu klasöre kaydedin.")

# Tahmin fonksiyonu
def predict_digit(image):
    if isinstance(image, dict):
        image = image.get("composite", None)

    if image is None or np.mean(image) > 250:
        return "Lütfen belirgin bir rakam çizin."

    try:
        # Görüntüyü uygun forma sok
        image = cv2.resize(image, (28, 28))
        if len(image.shape) == 3:
            image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        image = 255 - image  # Siyah zemin, beyaz çizim
        image = image.reshape(1, 28, 28, 1).astype("float32") / 255.0

        prediction = model.predict(image)
        return f"Tahmin: {np.argmax(prediction)}"

    except Exception as e:
        return f"Hata oluştu: {str(e)}"

# Gradio arayüzü
demo = gr.Interface(
    fn=predict_digit,
    inputs=gr.Sketchpad(
        image_mode="L",               # Gri tonlama
        canvas_size=(200, 200),       # Çizim alanı boyutu (shape yerine canvas_size!)
        label="0-9 arası bir rakam çizin"
    ),
    outputs=gr.Textbox(label="Tahmin"),
    title="El Yazısı Rakam Tanıma",
    description="Lütfen 0-9 arası bir rakam çizin, yapay zeka tahmin etsin.",
    live=False
)

demo.launch()